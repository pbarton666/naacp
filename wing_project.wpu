#!wing
#!version=5.0
##################################################################
# Wing IDE project file : User-specific branch                   #
##################################################################
[user attributes]
debug.show-args-dialog = {loc('build_all_numpy.py'): False,
                          loc('test_np_array.py'): False}
guimgr.overall-gui-state = {'windowing-policy': 'combined-window',
                            'windows': [{'name': 'DTKOdTFBsINdIy5ZPotHInUeya'\
        'LmovpU',
        'size-state': 'maximized',
        'type': 'dock',
        'view': {'area': 'tall',
                 'constraint': None,
                 'current_pages': [0,
                                   0],
                 'full-screen': False,
                 'notebook_display': 'normal',
                 'notebook_percent': 0.20303605313092976,
                 'override_title': None,
                 'pagelist': [('project',
                               'tall',
                               0,
                               {'tree-state': {'file-sort-method': 'by name',
        'list-files-first': False,
        'tree-states': {'deep': {'expanded-nodes': [],
                                 'selected-nodes': [],
                                 'top-node': ()}},
        'tree-style': 'deep'}}),
                              ('browser',
                               'tall',
                               0,
                               {'all_tree_states': {u'By Module': {'expanded'\
        '-nodes': [],
        'selected-nodes': [],
        'top-node': None}},
                                'browse_mode': u'By Module',
                                'follow-selection': False,
                                'sort_mode': 'Alphabetically',
                                'visibility_options': {u'Derived Classes': False,
        u'Imported': False,
        u'Modules': True}}),
                              ('snippets',
                               'tall',
                               0,
                               {'tree-states': {'__all__': [],
        u'c': [],
        u'django': [],
        u'html': [],
        u'py': []}}),
                              ('source-assistant',
                               'tall',
                               2,
                               {}),
                              ('debug-stack',
                               'tall',
                               1,
                               {}),
                              ('indent',
                               'tall',
                               2,
                               {})],
                 'primary_view_state': {'area': 'wide',
        'constraint': None,
        'current_pages': [0,
                          0],
        'notebook_display': 'normal',
        'notebook_percent': 0.44253632760898287,
        'override_title': None,
        'pagelist': [('interactive-search',
                      'wide',
                      0,
                      {'fScope': {'fFileSetName': u'All Source Files',
                                  'fLocation': None,
                                  'fRecursive': True,
                                  'fType': 'project-files'},
                       'fSearchSpec': {'fEndPos': None,
                                       'fIncludeLinenos': True,
                                       'fInterpretBackslashes': False,
                                       'fMatchCase': False,
                                       'fOmitBinary': True,
                                       'fRegexFlags': 46,
                                       'fReplaceText': u'i',
                                       'fReverse': False,
                                       'fSearchText': u'logger',
                                       'fStartPos': 0,
                                       'fStyle': 'text',
                                       'fWholeWords': False,
                                       'fWrap': True},
                       'fUIOptions': {'fAutoBackground': True,
                                      'fFilePrefix': 'short-file',
                                      'fFindAfterReplace': True,
                                      'fInSelection': False,
                                      'fIncremental': True,
                                      'fReplaceOnDisk': False,
                                      'fShowFirstMatch': False,
                                      'fShowLineno': True,
                                      'fShowReplaceWidgets': False},
                       'replace-entry-expanded': False,
                       'search-entry-expanded': False}),
                     ('debug-data',
                      'wide',
                      0,
                      {}),
                     ('debug-exceptions',
                      'wide',
                      0,
                      {}),
                     ('debug-stack',
                      'wide',
                      0,
                      {'codeline-mode': 'below'}),
                     ('debug-io',
                      'wide',
                      1,
                      {}),
                     ('debug-probe',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 133,
                       'folded-linenos': [],
                       'history': {u'file:/home/pat/data/RL_analysis/p/build_all_numpy.py': ['l'\
        'en(npa)\n',
        'len(npa[0])\n',
        'len(files)\n'],
                                   u'file:/home/pat/data/RL_analysis/p/build_tables.py': ['o'\
        's.path.basename(f)\n',
        'os.path.splitext(f)\n',
        'cols\n',
        "curs.execute('select * from dir_1_data')\n",
        'r=curs.fetchall()\n',
        'for x in r:\n   print (x)\n\n',
        'col_name\n',
        'raw_name\n',
        'len(bits)\n',
        'fil.readline()\n',
        'header\n',
        'sal\n',
        "'(' + ', '.join(db_cols) _')'\n",
        "'(' + ', '.join(db_cols) +_')'\n",
        "'(' + ', '.join(db_cols) + ')'\n",
        'DB\n',
        't_name\n',
        'print(sql)\n',
        "s='CREATE TABLE IF NOT EXISTS test.dir_1_data (\\n\\t origin intege"\
        "r,\\n\\t dest integer,\\n\\t junk100 integer,\\n\\t junk200 integer"\
        ");'\n",
        'curs.execure(s)\n',
        'curs.execute(s)\n',
        "s='CREATE TABLE IF NOT EXISTS public.dir_1_data (\\n\\t origin inte"\
        "ger,\\n\\t dest integer,\\n\\t junk100 integer,\\n\\t junk200 integ"\
        "er);'\n",
        "s='CREATE TABLE IF NOT EXISTS pat.public.dir_1_data (\\n\\t origin "\
        "integer,\\n\\t dest integer,\\n\\t junk100 integer,\\n\\t junk200 i"\
        "nteger);'\n",
        'conn.commit()\n',
        'sql\n',
        'db_cols\n'],
                                   u'file:/home/pat/data/RL_analysis/p/test_db_numpy.py': ['i'\
        'n_dir\n',
        '"|".join(columns_reported)\n',
        'fn\n',
        'dat\n',
        'data\n',
        'npa\n',
        'print (data_fn)\n',
        'f.readlines()\n'],
                                   u'file:/home/pat/data/RL_analysis/p/test_np_array.py': [' '\
        'od = make_OD_array(rows, cols)\n',
        'od = make_OD_array(rows, cols)\n',
        'rows\n',
        'data.ravel()\n',
        'len(od)\n',
        'len(od[0])\n',
        'len(data) ^2 \n',
        'len(data)^2 \n\n',
        '(len(data))^2 \n',
        'len(data)\n',
        '16^2\n',
        '16**2\n',
        'range(1, cols+1)\n',
        'od[0]\n',
        'od[1]\n',
        'opa[:,0]\n',
        'npa[:,0]\n',
        'npa[:,0]=od[0]\n',
        'npa[:,1]=od[0]\n',
        'npa[:,1]=od[1]\n',
        'npa[:,1]=data[1]\n',
        'npa[:,1]=data[]\n',
        'npa[:,3]=data[:]\n',
        'npa[:,2]=data[:]\n',
        'FN_DELIMITER.join(raw_name.split(FN_DELIMITER)[1:]).lower()\n',
        'columns\n',
        'name_to_flat(d)\n',
        "os.path.join(root, '_cols_'+'name_to_flat(d) + '_cols')\n",
        "os.path.join(root, '_cols_'+name_to_flat(d) + '_cols')\n",
        "os.path.join(root, '_cols_'+name_to_flat(d))\n",
        'o=self.out_dir\n',
        'o\n',
        'os.listdir(o)\n',
        'os.listdir(self.temp_dir)\n',
        'os.listdir(self.out_dir)\n',
        'self.out_dir\n',
        'root\n',
        'fiels\n',
        'files\n',
        'dirs\n',
        'data_fn\n',
        'od\n',
        'len(od[1])\n',
        'len(npa)\n',
        'data_col\n',
        'range(1, rows+1)\n',
        "for x, y, z in os.walk('/tmp/tmptkx11n'):\n            print(x)\n  "\
        "          print(y)\n            print(z)\n\n",
        'np\n',
        'print(in_dir)\n',
        'content[1]\n',
        'content[0][3]==4\n',
        'content[0][3]\n',
        'for c in content:\n    print(c)\n\n',
        'data\n',
        'subdir\n',
        'pprint(content)\n',
        'pprint(npa)\n',
        'npa.asttype(int)\n',
        'npa.astype(int)\n',
        'x = content[0][0]\n',
        'x.type\n',
        'x.type()\n',
        'type(x)\n',
        'int(x)\n',
        'nta\n',
        'npa\n',
        'len(contents)\n',
        'contents\n',
        'content[0]\n',
        'test_files.sort()\n',
        'test_files\n',
        'for t in test_files.sort()\n',
        'for t in test_files.sort():\n  print(t)\n\n',
        'len(content[0])\n',
        'from pprint import pprint\n',
        'x = pprint(content)\n',
        'x\n',
        'print(content)\n',
        'content[:-4]\n',
        'content[-4]\n',
        'content[-4:]\n',
        'pc = pprint(content)\n',
        'pc[0]\n',
        'header=content.pop(0)\n',
        "header.replace('#','').strip.split('|')\n",
        "header.replace('#','')\n",
        "header.replace('#','').strip()\n",
        "header.replace('#','').strip().split('|')\n",
        'content[-1]\n',
        'len(content)\n',
        "first_row.strip()=='1,1,10011,20011'\n",
        'header\n',
        'last_row\n',
        'first_row\n',
        'content\n',
        'f.seek(0)\n',
        'f.readline()\n',
        'print(se.f.temp_dir)\n',
        'print(self.temp_dir)\n',
        'print(self.out_dir)\n'],
                                   u'file:/home/pat/data/RL_analysis/python/build_tables.py': ['d'\
        'ir_map.get(t)\n',
        't_name\n',
        'dir_map.get(t_name)\n',
        'dir_map[d]\n',
        'for k in dir_map.keys():\n    k\n\n',
        'dir_map()\n',
        'dir_map\n',
        'for k in dir_map.keys():\n    print(k)\n\n',
        'd\n',
        'logger\n'],
                                   u'file:/home/pat/data/RL_analysis/python/nptest.py': ['o'\
        'd = np.array([])\n',
        'od=np.array(int)\n',
        'od[0:len(data)]=0\n',
        'od=np.zeros((5))\n',
        'od\n',
        'od=np.zeros((4))\n',
        'od=np.zeros((3))\n',
        'data[:, :-1]=od\n',
        'data[:,:-1]=np.zeros(3)\n',
        'N=3\n',
        'b = np.zeros((N,N+1))\n',
        'data=data[1:,1""]\n',
        "data = np.genfromtxt(fn, delimiter=',', dtype=int)\n",
        'data=data[1:,1:]\n',
        'b=b.transpose\n',
        'b=np.zeros(3)\n',
        'b=b.transpose()\n',
        'data[,-1]=b\n',
        'data[,:-1]=b\n',
        'b=np.zeros(4)\n',
        'np.append(data, b, axis=1)\n',
        'np.c_(data, b, 1)\n',
        'np.c_[data, b, 1]\n\n',
        'np.c_[data, b, np.ones(3)]\n',
        'np.c_[data,np.ones(3),1]\n',
        'np.c_[data,np.ones(4),1]\n',
        'np.c_[data,np.ones(5),1]\n',
        'data\n',
        'data.dtype\n',
        'db\n',
        'b[0]\n',
        'import numpy as np\nN = 10\na = np.random.rand(N,N)\nb = np.zeros(('\
        'N,N+1))\nb[:,:-1] = a\n\n',
        'import numpy as np\nN = 3\na = np.random.rand(N,N)\nb = np.zeros((N'\
        ',N+1))\nb[:,:-1] = a\n\n',
        'b\n',
        'a=np.array(int)\n',
        'a.insert(b)\n',
        'np.insert(a, b, axis=0)\n',
        'np.insert(a, [1], b, axis=0)\n',
        'a=np.array[1179,1179]\n',
        'arr=np.zeros(1179,1179)\n',
        'arr=np.zeros((1179,1179))\n',
        'arr=np.zeros((1179*1179, 500))\n',
        'd = list(range(1,1180))\n',
        'd[-1]\n',
        'a[0]=d\n',
        'vector = np.array(d)\n',
        'a[0]=vector\n',
        'a[0]\n',
        'arr+=vector[:]\n',
        'vector = np.matrix[0:1179]\n',
        'vector = np.matrix()\n',
        'vector = 1\n',
        'vector = np.matrix(int)\n',
        'vector[:] = 1\n',
        'vector\n',
        'matrix+=vector\n',
        'arr+=vector\n',
        'arr[0,]=vector\n',
        'arr[,0]=vector\n',
        'arr[,1]=vector\n',
        'arr[0,:]=vector\n',
        'arr[:,0]=vector\n',
        'arr[:0]=range(1179)\n',
        'arr[:,0]=range(1179)\n',
        'arr=np.zeros((1179, 500))\n',
        'arr[:,0]=0:5\n',
        'a=np.r_[1:1179, 1:1179]\n',
        'a=np.r_[1:1190]\n',
        'a=np.r_[1:1180]\n',
        'arr[],:1]\n',
        'arr[,:1]\n',
        'arr[:1]\n',
        'arr[:2]\n',
        'arr[:0]\n',
        'arr[1]\n',
        'arr[,1]\n',
        'arr[0:0]\n',
        'arr[0:1]\n',
        'arr[0][1]\n',
        'arr[1][1]\n',
        'arr[1][0]\n',
        'arr[-1][0]\n',
        'arr[:,0]=a\n',
        'arr[2][0]\n',
        "\"1, 101, 102, 103,  104 \\n\".format('1', str(ix+11), str(ix+21), "\
        "str(ix+31), str(ix+41))\n",
        '"{} ,  {},  {},  {},   {} \\n".format(0,     1,     2,     3,      '\
        '4 )\n',
        "\"{} ,  {},  {},  {},   {} \\n\".format('0',    ' 1',     '2',     "\
        "'3',      '4' )\n",
        "\"2, {},  {},  {},   {} \\n\".format('2', str(ix+12), str(ix+22), s"\
        "tr(ix+32), str(ix+42))\n",
        "\" {},  {},  {},   {},   {}  \\n\".format('1', str(ix+11), str(ix+2"\
        "1), str(ix+31), str(ix+41))\n",
        'a\n',
        'v1\n',
        'len(rows)\n',
        'arr\n',
        'x=np.zeros(1187*1197, 500)\n',
        'x=np.zeros((1187*1197, 500))\n\n',
        'x=np.zeros((1187*1197, 200))\n',
        'x=np.zeros((1187*1197, 100))\n',
        'x=np.zeros((1197*1197, 100))\n',
        'x\n',
        'x=np.zeros((1197*1197, 150))\n'],
                                   u'file:/home/pat/data/RL_analysis/python/run_all.py': ['p'\
        'dir\n',
        'os.path.basename(file)\n',
        'os.listdir(sample_dir)[0]\n',
        'sample_dir\n',
        'os.listdir(os.path.join(root, dirs[0]) )\n',
        'dirs[0]\n',
        "line.split(',')\n",
        "with open(scratch_file, 'r') as f:\n    print (f.readlines())\n()\n"\
        "\n",
        "with open(scratch_file, 'r') as f:\n    print (f.readlines())\n\n",
        'sql\n',
        "curs.execute('select * from h_HWY_OD')\n",
        'r = curs.fetchall()\n',
        'f\n',
        'for x in r:\n         print(x)\n\n',
        "get_table_name('gO_CUBS_OUD')\n",
        'a, b, c = os.walk.pdir()\n'],
                                   u'file:/home/pat/data/RL_analysis/python/test_load_flat.py': ['s'\
        ' = self.cursor.fetchall\n',
        's = self.curs.fetchall\n',
        's\n',
        's = self.curs.fetchall()\n',
        'for x in s:\n   print(x)\n\n',
        't_name.join(bits[2:].lower())\n',
        't_name.lower()\n',
        'expected_tables\n',
        'actual_tables\n',
        'build_flat_file.main(pdir= self.odir, odir = self.out_dir, keep_fla'\
        't=True)\n',
        'self.buffer\n',
        'next(reader)\n',
        'out.append(col)\n',
        'row[col_index]\n',
        'out\n',
        'sq\n',
        "'{}\\n'.format(line)\n",
        'f.readlin()\n',
        'table\n',
        'a = sql\n',
        'a\n',
        "x='COPY persontrip_od (hbo_inc1) FROM STDIN WITH CSV HEADER'\n",
        'curs.copy_expert(sql=sql, file=f)\n',
        "curs.execute('CREATE DATABASE {}'.format(DB))\n",
        "sql[:-1] + ')'\n",
        "print(sql[:-1] + ')')\n",
        'curs.execute(sql)\n',
        'print(sql)\n',
        'sql\n',
        "x='COPY persontrip_od (hbo_inc1\\n) FROM STDIN WITH CSV HEADER'\n",
        'curs.copy_expert(sql=x, file=f) \n',
        'f.seek(0)\n',
        'f.readline()\n',
        'curs.copy_expert(sql=sql, file=f) \n',
        'conn.commit()\n',
        "curs.execute('select * from {}'.format(table))\n",
        'print(curs.fetchall())\n']},
                       'launch-id': None,
                       'sel-line': 144,
                       'sel-line-start': 15042,
                       'selection_end': 15042,
                       'selection_start': 15042}),
                     ('debug-watch',
                      'wide',
                      1,
                      {'node-states': [('eval',
        u'answer'),
                                       ('symbolic',
        ['mylist'])],
                       'tree-state': {'expanded-nodes': [(1,)],
                                      'selected-nodes': [(0,)],
                                      'top-node': (0,)}}),
                     ('debug-modules',
                      'wide',
                      1,
                      {}),
                     ('python-shell',
                      'wide',
                      2,
                      {'active-range': (None,
        -1,
        -1),
                       'attrib-starts': [],
                       'first-line': 61,
                       'folded-linenos': [],
                       'history': {None: ['import psycopg2\n',
        "def get_table_name(dname):\n    \"\"\"Finds the database table name"\
        " associated with a directory name.\n       If the name has not been"\
        " mapped in dir_map, a rule-based name is\n       applied. The first"\
        " two bits are kept, prepeneded if first char is UC.\n       \n     "\
        "  THERE_IS_ALWAYS_NEXT_YEAR -> t_THERE_IS\n       gO_CUBS_2016 -> g"\
        "O_CUBS\n       \"\"\"\n    t_name = dir_map.get(dname, 0)\n    #if "\
        "no mapping, make up a name\n    if not t_name:\n        #split it u"\
        "p\n        bits = dname.split('_')\n        #if it begins w/ upper "\
        "case, prepend a lc version + _\n        if bits[0][0] in string.asc"\
        "ii_uppercase:\n            t_name = bits[0][0].lower() + '_'\n     "\
        "       #now add the next two bits of the name\n            t_name ="\
        " t_name + '_'.join(bits[:2])\n        else:\n            t_name = '"\
        "_'.join(bits[:2])\n\n    return t_name\n\n",
        'get_table_name(gO_CUBS_OUD)\n',
        "get_table_name(''gO_CUBS_OUD')\n",
        "get_table_name('gO_CUBS_OUD')\n",
        'import numpy\n',
        'import numpy as np\n',
        "for r in range(5):\n    for c in range(3):\n      print('{} {}'.for"\
        "mat(r,c))\n\n",
        'ls=[1,2,3]\n',
        'ls.pop\n',
        'ls.pop()\n',
        'ls\n',
        '[1]*3\n']},
                       'launch-id': None,
                       'sel-line': 75,
                       'sel-line-start': 1988,
                       'selection_end': 1988,
                       'selection_start': 1988}),
                     ('os-command',
                      'wide',
                      1,
                      {'last-percent': 0.8,
                       'toolbox-percent': 0.5664939550949913,
                       'toolbox-tree-sel': ''})],
        'primary_view_state': {'editor_states': ({'bookmarks': ([[loc('database.py'),
        {'attrib-starts': [],
         'first-line': 0,
         'folded-linenos': [],
         'sel-line': 0,
         'sel-line-start': 0,
         'selection_end': 0,
         'selection_start': 0},
        1446844916.325529],
        [loc('build_flat.py'),
         {'attrib-starts': [('create_np_array',
                             25)],
          'first-line': 12,
          'folded-linenos': [],
          'sel-line': 27,
          'sel-line-start': 1127,
          'selection_end': 1165,
          'selection_start': 1165},
         1446844918.437257],
        [loc('build_all_numpy.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 15,
          'sel-line-start': 425,
          'selection_end': 480,
          'selection_start': 480},
         1446844980.208697],
        [loc('build_flat.py'),
         {'attrib-starts': [('create_np_array',
                             25)],
          'first-line': 15,
          'folded-linenos': [],
          'sel-line': 77,
          'sel-line-start': 3147,
          'selection_end': 3176,
          'selection_start': 3176},
         1446845081.12655],
        [loc('test_np_array.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 10,
          'sel-line-start': 183,
          'selection_end': 206,
          'selection_start': 206},
         1446845092.801141],
        [loc('build_flat.py'),
         {'attrib-starts': [('create_np_array',
                             25)],
          'first-line': 9,
          'folded-linenos': [],
          'sel-line': 77,
          'sel-line-start': 3147,
          'selection_end': 3176,
          'selection_start': 3176},
         1446845100.453338],
        [loc('test_np_array.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 10,
          'sel-line-start': 183,
          'selection_end': 206,
          'selection_start': 206},
         1446845104.73252],
        [loc('build_all_numpy.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 15,
          'sel-line-start': 425,
          'selection_end': 480,
          'selection_start': 480},
         1446845110.668613],
        [loc('build_flat.py'),
         {'attrib-starts': [],
          'first-line': 51,
          'folded-linenos': [],
          'sel-line': 19,
          'sel-line-start': 780,
          'selection_end': 808,
          'selection_start': 808},
         1446845153.755549],
        [loc('build_all_numpy.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 15,
          'sel-line-start': 425,
          'selection_end': 480,
          'selection_start': 480},
         1446845181.950371],
        [loc('build_tables.py'),
         {'attrib-starts': [('build_tables',
                             41)],
          'first-line': 96,
          'folded-linenos': [],
          'sel-line': 102,
          'sel-line-start': 3780,
          'selection_end': 3839,
          'selection_start': 3839},
         1446845319.377703],
        [loc('build_all_numpy.py'),
         {'attrib-starts': [],
          'first-line': 0,
          'folded-linenos': [],
          'sel-line': 14,
          'sel-line-start': 382,
          'selection_end': 424,
          'selection_start': 424},
         1446845358.247263],
        [loc('build_flat.py'),
         {'attrib-starts': [],
          'first-line': 36,
          'folded-linenos': [],
          'sel-line': 19,
          'sel-line-start': 780,
          'selection_end': 808,
          'selection_start': 808},
         1446845363.065438],
        [loc('build_flat.py'),
         {'attrib-starts': [('create_np_array',
                             25)],
          'first-line': 49,
          'folded-linenos': [],
          'sel-line': 59,
          'sel-line-start': 2350,
          'selection_end': 2385,
          'selection_start': 2379},
         1446845363.65873],
        [loc('build_flat.py'),
         {'attrib-starts': [('create_np_array',
                             25)],
          'first-line': 49,
          'folded-linenos': [],
          'sel-line': 59,
          'sel-line-start': 2350,
          'selection_end': 2398,
          'selection_start': 2398},
         1446845374.833897],
        [loc('build_flat.py'),
         {'attrib-starts': [('create_np_array',
                             25)],
          'first-line': 62,
          'folded-linenos': [],
          'sel-line': 77,
          'sel-line-start': 3150,
          'selection_end': 3168,
          'selection_start': 3162},
         1446845378.349582],
        [loc('build_flat.py'),
         {'attrib-starts': [],
          'first-line': 18,
          'folded-linenos': [],
          'sel-line': 23,
          'sel-line-start': 965,
          'selection_end': 971,
          'selection_start': 965},
         1446845380.577536],
        [loc('build_flat.py'),
         {'attrib-starts': [],
          'first-line': 18,
          'folded-linenos': [],
          'sel-line': 23,
          'sel-line-start': 965,
          'selection_end': 991,
          'selection_start': 985},
         1446845381.876206],
        [loc('build_flat.py'),
         {'attrib-starts': [],
          'first-line': 18,
          'folded-linenos': [],
          'sel-line': 23,
          'sel-line-start': 965,
          'selection_end': 1005,
          'selection_start': 999},
         1446845382.705633],
        [loc('build_flat.py'),
         {'attrib-starts': [('create_np_array',
                             25)],
          'first-line': 26,
          'folded-linenos': [],
          'sel-line': 36,
          'sel-line-start': 1446,
          'selection_end': 1464,
          'selection_start': 1458},
         1446845387.919043]],
        20),
        'current-loc': loc('build_all_numpy.py'),
        'editor-state-list': [(loc('build_all_numpy.py'),
                               {'attrib-starts': [],
                                'first-line': 0,
                                'folded-linenos': [],
                                'sel-line': 14,
                                'sel-line-start': 382,
                                'selection_end': 424,
                                'selection_start': 424}),
                              (loc('build_flat.py'),
                               {'attrib-starts': [('create_np_array',
        25)],
                                'first-line': 26,
                                'folded-linenos': [],
                                'sel-line': 36,
                                'sel-line-start': 1446,
                                'selection_end': 1464,
                                'selection_start': 1458}),
                              (loc('build_tables.py'),
                               {'attrib-starts': [('build_tables',
        41)],
                                'first-line': 96,
                                'folded-linenos': [],
                                'sel-line': 102,
                                'sel-line-start': 3780,
                                'selection_end': 3839,
                                'selection_start': 3839}),
                              (loc('database.py'),
                               {'attrib-starts': [],
                                'first-line': 0,
                                'folded-linenos': [],
                                'sel-line': 0,
                                'sel-line-start': 0,
                                'selection_end': 0,
                                'selection_start': 0}),
                              (loc('test_np_array.py'),
                               {'attrib-starts': [],
                                'first-line': 0,
                                'folded-linenos': [],
                                'sel-line': 10,
                                'sel-line-start': 183,
                                'selection_end': 206,
                                'selection_start': 206}),
                              (loc('utilities.py'),
                               {'attrib-starts': [],
                                'first-line': 0,
                                'folded-linenos': [],
                                'sel-line': 0,
                                'sel-line-start': 0,
                                'selection_end': 0,
                                'selection_start': 0})],
        'has-focus': True,
        'locked': False},
        [loc('build_all_numpy.py'),
         loc('build_flat.py'),
         loc('build_tables.py'),
         loc('database.py'),
         loc('test_np_array.py'),
         loc('utilities.py')]),
                               'open_files': [u'utilities.py',
        u'database.py',
        u'test_np_array.py',
        u'build_tables.py',
        u'build_flat.py',
        u'build_all_numpy.py']},
        'saved_notebook_display': None,
        'split_percents': {0: 0.3349282296650718},
        'splits': 2,
        'tab_location': 'top',
        'user_data': {}},
                 'saved_notebook_display': None,
                 'split_percents': {0: 0.5},
                 'splits': 2,
                 'tab_location': 'left',
                 'user_data': {}},
        'window-alloc': (119,
                         24,
                         1200,
                         610)}]}
guimgr.recent-documents = [loc('build_all_numpy.py'),
                           loc('build_flat.py'),
                           loc('build_tables.py'),
                           loc('test_np_array.py'),
                           loc('database.py'),
                           loc('utilities.py')]
search.search-history = [u'logger']
testing.stored-results = (1,
                          [],
                          {})
